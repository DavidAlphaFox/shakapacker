# Note: You must restart bin/webpacker-dev-server for changes to take effect

default: &default
  source_path: app/javascript

  # You can have a subdirectory of the source_path, like 'packs' (recommended).
  # Alternatively, you can use '/' to use the whole source_path directory.
  source_entry_path: /

  # If nested_entries is true, then we'll pick up subdirectories within the source_entry_path.
  # You cannot set this option to true if you set source_entry_path to '/'
  nested_entries: false

  #  While using a File-System-based automated bundle generation feature, miscellaneous warnings suggesting css order
  #  conflicts may arise due to the mini-css-extract-plugin. For projects where css ordering has been mitigated through
  #  consistent use of scoping or naming conventions, the css order warnings can be disabled by setting
  #  css_extract_ignore_order_warnings to true
  css_extract_ignore_order_warnings: false

  public_root_path: public
  public_output_path: packs
  cache_path: tmp/webpacker
  webpack_compile_output: true
  # See https://github.com/shakacode/shakapacker#deployment
  webpacker_precompile: true

  # Location for manifest.json, defaults to {public_output_path}/manifest.json if unset
  # manifest_path: public/packs/manifest.json

  # Additional paths webpack should look up modules
  # ['app/assets', 'engine/foo/app/assets']
  additional_paths: []

  # Reload manifest.json on all requests so we reload latest compiled packs
  cache_manifest: false

  # Select loader to use, available options are 'babel' (default), 'swc' or 'esbuild'
  webpack_loader: 'babel'

  # Set to true to enable check for matching versions of shakapacker gem and NPM package - will raise an error if there is a mismatch or wildcard versioning is used
  ensure_consistent_versioning: false

  # Select whether the compiler will use SHA digest ('digest' option) or most most recent modified timestamp ('mtime') to determine freshness
  compiler_strategy: digest

development:
  <<: *default
  compile: true
  compiler_strategy: mtime

  # Reference: https://webpack.js.org/configuration/dev-server/
  # Keys not described there are documented inline and in https://github.com/shakacode/shakapacker/
  # Keys not listed below are not supported.
  dev_server:
    # Specify whether to serve over HTTPS. True uses a self-signed certificate, but you can also provide your own
    # as an object. See https://webpack.js.org/configuration/dev-server/#devserverhttps
    https: false
    # Specify a host to use. See https://webpack.js.org/configuration/dev-server/#devserverhost
    host: localhost
    # Specify a port number to listen for requests on. Use 'auto' to automatically use a free port.
    # See https://webpack.js.org/configuration/dev-server/#devserverport
    port: 3035
    # Hot Module Replacement updates modules while the application is running without a full reload
    # Used instead of the `hot` key in https://webpack.js.org/configuration/dev-server/#devserverhot
    hmr: false
    # If HMR is on, CSS will be inlined by delivering it as part of the script payload via style-loader.
    # Make sure you have style-loader in your project dependencies.
    #
    # If you want to instead deliver CSS via <link> with the mini-css-extract-plugin, set inline_css to false.
    # In that case, style-loader is not needed as a dependency.
    #
    # mini-css-extract-plugin is a required dependency in both cases.
    inline_css: true
    # Specify whether to reload/refresh the page when file changes are detected. Defaults to the inverse of hmr.
    # Uncomment to manually set this. This is only used if `hmr` is false or `watch_files` is set.
    # See https://webpack.js.org/configuration/dev-server/#devserverlivereload
    # live_reload: true
    # All keys from https://webpack.js.org/configuration/dev-server/#devserverclient can be specified
    client:
      # Should we show a full-screen overlay in the browser when there are compiler errors or warnings
      # (can be limited to errors or warnings only)? https://webpack.js.org/configuration/dev-server/#overlay
      overlay: true
      # This option allows specifying URL to web socket server (useful when you're proxying dev server and client script
      # does not always know where to connect to). May also be a string.
      # To get protocol/hostname/port from browser use 'auto://0.0.0.0:0/ws'.
      # https://webpack.js.org/configuration/dev-server/#websocketurl
      # webSocketURL:
      #  hostname: '0.0.0.0'
      #  pathname: '/ws'
      #  port: 8080
    # Should we use gzip compression? See https://webpack.js.org/configuration/dev-server/#devservercompress
    compress: true
    # This option allows you to list services that are allowed to access the dev server. Use `.example.com` to
    # allow all subdomains of example.com (including itself). When set to 'all' this option bypasses host checking.
    # THIS IS NOT RECOMMENDED as apps that do not check the host are vulnerable to DNS rebinding attacks.
    # When set to 'auto' this allows localhost and the values of `host` and `client.webSocketURL.hostname` keys.
    # See https://webpack.js.org/configuration/dev-server/#devserverallowedhosts
    allowed_hosts: all
    # Shows progress and colorizes output of bin/webpacker[-dev-server]
    pretty: true
    # Adds headers to all responses. See https://webpack.js.org/configuration/dev-server/#devserverheaders
    headers:
      'Access-Control-Allow-Origin': '*'
    # This option allows configuring options for serving static files from a directory.
    # Can use all keys from https://webpack.js.org/configuration/dev-server/#devserverstatic
    static:
      watch:
        ignored: '**/node_modules/**'

test:
  <<: *default
  compile: true

  # Compile test packs to a separate directory
  public_output_path: packs-test

production:
  <<: *default

  # Production depends on precompilation of packs prior to booting for performance.
  compile: false

  # Cache manifest.json for performance
  cache_manifest: true
